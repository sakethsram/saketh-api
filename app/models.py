from datetime import datetime

from sqlalchemy import DECIMAL
from sqlalchemy import TIMESTAMP
from sqlalchemy import Column
from sqlalchemy import Date
from sqlalchemy import DateTime
from sqlalchemy import Float
from sqlalchemy import ForeignKey
from sqlalchemy import Integer
from sqlalchemy import Numeric
from sqlalchemy import SmallInteger
from sqlalchemy import String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

from app.database import Base


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    user_first_name = Column(String(125), nullable=False)
    user_last_name = Column(String(125), nullable=False)
    user_e_mail_id = Column(String(125), nullable=True)
    user_phone_number = Column(String(125), nullable=True)
    user_login_id = Column(String(125), nullable=False, unique=True)
    user_password = Column(String(250), nullable=False)
    client_id = Column(Integer, ForeignKey("client_master.id", ondelete="CASCADE"), nullable=False)
    created_on = Column(TIMESTAMP, default=datetime.now)
    created_by = Column(String(125), nullable=True)
    modified_on = Column(TIMESTAMP, nullable=True, onupdate=datetime.now)
    modified_by = Column(String(125), nullable=True)
    active_flag = Column(SmallInteger, nullable=False, default=1)

    # Relationship with UserRole
    user_roles = relationship("UserRole", back_populates="user")

    # Relationship with user tokens
    tokens = relationship("UserTokens", back_populates="user", cascade="all, delete-orphan")

class Role(Base):
    __tablename__ = "roles"

    id = Column(Integer, primary_key=True, index=True)
    role_name = Column(String(125), nullable=False)
    role_description = Column(String(250), nullable=False)
    created_on = Column(TIMESTAMP, default=datetime.now)
    created_by = Column(String(125), nullable=True)
    modified_on = Column(TIMESTAMP, nullable=True, onupdate=datetime.now)
    modified_by = Column(String(125), nullable=True)
    active_flag = Column(SmallInteger, nullable=False, default=1)

    # Relationship with UserRole
    user_roles = relationship("UserRole", back_populates="role")


class UserRole(Base):
    __tablename__ = "user_roles"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    role_id = Column(Integer, ForeignKey("roles.id", ondelete="CASCADE"), nullable=False)
    created_on = Column(TIMESTAMP, default=datetime.now)
    created_by = Column(String(125), nullable=True)
    modified_on = Column(TIMESTAMP, nullable=True, onupdate=datetime.now)
    modified_by = Column(String(125), nullable=True)
    active_flag = Column(SmallInteger, nullable=False, default=1)

    # Relationships
    user = relationship("User", back_populates="user_roles")
    role = relationship("Role", back_populates="user_roles")

class ClientMaster(Base):
    __tablename__ = "client_master"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(125), nullable=False)
    pan = Column(String(125), nullable=False)
    gst = Column(String(125), nullable=False)
    client_reg_address_line_1 = Column(String(250), nullable=False)
    client_reg_address_line_2 = Column(String(250), nullable=True)
    client_reg_city = Column(String(125), nullable=False)
    client_reg_state = Column(String(125), nullable=False)
    client_reg_country = Column(String(125), nullable=False)
    url = Column(String(125), nullable=True)
    created_on = Column(TIMESTAMP, default=datetime.now, nullable=False)
    created_by = Column(String(125), nullable=True)
    modified_on = Column(TIMESTAMP, default=datetime.now, onupdate=datetime.now, nullable=False)
    modified_by = Column(String(125), nullable=True)
    active_flag = Column(SmallInteger, default=1, nullable=False)

class DistyMaster(Base):
    __tablename__ = "disty_master"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(125), nullable=False)
    pan = Column(String(125), nullable=True)
    gst = Column(String(125), nullable=True)
    registered_address_line_1 = Column(String(250), nullable=True)
    registered_address_line_2 = Column(String(250), nullable=True)
    registered_city = Column(String(125), nullable=True)
    registered_state = Column(String(125), nullable=True)
    registered_country = Column(String(125), nullable=True)
    created_on = Column(TIMESTAMP, default=datetime.now, nullable=False)
    created_by = Column(String(125), nullable=True)
    modified_on = Column(TIMESTAMP, default=datetime.now, onupdate=datetime.now, nullable=False)
    modified_by = Column(String(125), nullable=True)
    active_flag = Column(SmallInteger, default=1, nullable=False)

class EvenflowDistys(Base):
    __tablename__ = "evenflow_distys"
    id = Column(Integer, primary_key=True, index=True)
    client_id = Column(Integer, ForeignKey("client_master.id"), nullable=False)
    disty_id = Column(Integer, ForeignKey("disty_master.id"), nullable=False)
    created_on = Column(TIMESTAMP, default=datetime.now)
    created_by = Column(String(125), default="bhagavan")
    modified_on = Column(TIMESTAMP, default=datetime.now, onupdate=datetime.now)
    modified_by = Column(String(125), default="bhagavan")
    active_flag = Column(SmallInteger, default=1, nullable=False)


class EvenflowAccountingDetails(Base):
    __tablename__ = "evenflow_accounting_details"
    id = Column(Integer, primary_key=True, index=True)
    client_id = Column(Integer, ForeignKey("client_master.id"), nullable=False)
    invoice_inputs = Column(String(125), nullable=False)
    invoice_number_auto = Column(SmallInteger, nullable=False)
    accounting_tool_name = Column(String(125), nullable=False)
    accounting_tool_url = Column(String(125), nullable=False)
    accounting_tool_userid = Column(String(125), nullable=False)
    accounting_tool_pwd = Column(String(125), nullable=False)
    created_on = Column(TIMESTAMP, default=datetime.now)
    created_by = Column(String(125), default="bhagavan")
    modified_on = Column(TIMESTAMP, default=datetime.now, onupdate=datetime.now)
    modified_by = Column(String(125), default="bhagavan")
    active_flag = Column(SmallInteger, default=1, nullable=False)

class UserTokens(Base):
    __tablename__ = "user_tokens"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    token = Column(String, nullable=False)
    created_on = Column(TIMESTAMP, default=func.now(), onupdate=func.now(), nullable=False)
    created_by = Column(String, nullable=True)
    modified_on = Column(TIMESTAMP, default=func.now(), onupdate=func.now(), nullable=False)
    modified_by = Column(String, nullable=True)
    active_flag = Column(SmallInteger, nullable=False, default=1)  # Add active_flag with a default value

    # Relationship with User
    user = relationship("User", back_populates="tokens")

class EvenflowCustomerMaster(Base):
    __tablename__ = 'evenflow_customer_master'

    id = Column(Integer, primary_key=True, autoincrement=True)
    client_id = Column(Integer, ForeignKey('client_master.id'), nullable=False)
    customer_name = Column(String(125), nullable=False)
    customer_contact_salutation = Column(String(125))
    customer_contact_first_name = Column(String(125))
    customer_contact_last_name = Column(String(125))
    customer_contact_phone = Column(String(125))
    currency_code = Column(String(125))
    website = Column(String(125))
    opening_balance = Column(DECIMAL(20, 2), default=0.0)
    opening_balance_exchange_rate = Column(DECIMAL(20, 2), default=1.0)
    branch_id = Column(String(125))
    branch_name = Column(String(125))
    bank_account_payment = Column(SmallInteger, nullable=False, default=1)
    credit_limit = Column(DECIMAL(20, 2), default=0.0)
    customer_sub_type = Column(String(125))
    billing_attention = Column(String(125))
    billing_address_line_1 = Column(String(250))
    billing_address_line_2 = Column(String(250))
    billing_city = Column(String(125))
    billing_state = Column(String(125))
    billing_country = Column(String(125))
    billing_code = Column(String(125))
    billing_phone = Column(String(125))
    billing_fax = Column(String(125))
    shipping_attention = Column(String(125))
    shipping_address_line_1 = Column(String(250))
    shipping_address_line_2 = Column(String(250))
    shipping_city = Column(String(125))
    shipping_state = Column(String(125))
    shipping_country = Column(String(125))
    shipping_code = Column(String(125))
    shipping_phone = Column(String(125))
    shipping_fax = Column(String(125))
    skype_handle = Column(String(125))
    facebook_handle = Column(String(125))
    twitter_handle = Column(String(125))
    department = Column(String(125))
    designation = Column(String(125))
    price_list = Column(String(125))
    payment_terms = Column(String(125))
    payment_terms_label = Column(String(125))
    gst_treatment = Column(String(125))
    gst_identification_number = Column(String(125))
    owner_name = Column(String(125))
    primary_contact_id = Column(String(125))
    email_id = Column(String(125))
    mobile_phone = Column(String(125))
    contact_id = Column(String(125))
    contact_name = Column(String(125))
    contact_type = Column(String(125))
    place_of_contact = Column(String(125))
    place_of_contact_with_state_code = Column(String(125))
    taxable = Column(SmallInteger, nullable=False, default=1)
    tax_id = Column(String(125))
    tax_name = Column(String(125))
    tax_percentage = Column(DECIMAL(20, 2), default=0.0)
    exemption_reason = Column(String(250))
    contact_address_id = Column(Float)
    brand = Column(String(125))
    sales_channel = Column(String(125))
    cf_msme = Column(String(125))
    created_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, server_default=func.now(), onupdate=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False, default=1)


class EvenflowProductMaster(Base):
    __tablename__ = 'evenflow_product_master'

    id = Column(Integer, primary_key=True, autoincrement=True)
    client_id = Column(Integer, ForeignKey('client_master.id'), nullable=False)
    item_id = Column(Float, nullable=False)
    item_name = Column(String(255))
    sku = Column(String(125))
    hsn_sac = Column(Integer, nullable=False)
    description = Column(String(125))
    rate = Column(DECIMAL(20, 0))
    account = Column(String(125))
    account_code = Column(String(125))
    taxable = Column(SmallInteger, nullable=False)
    exemption_reason = Column(String(250))
    taxability_type = Column(String(125))
    product_type = Column(String(125))
    parent_category = Column(String(125))
    intra_state_tax_name = Column(String(250))
    intra_state_tax_rate = Column(DECIMAL(20, 2))
    intra_state_tax_type = Column(String(250))
    inter_state_tax_name = Column(String(250))
    inter_state_tax_rate = Column(DECIMAL(20, 2))
    inter_state_tax_type = Column(String(250))
    source = Column(String(125))
    reference_id = Column(String(125))
    status = Column(String(125))
    usage_unit = Column(String(125))
    purchase_rate = Column(DECIMAL(20, 2))
    purchase_account = Column(String(125))
    purchase_account_code = Column(String(125))
    purchase_description = Column(String(125))
    inventory_account = Column(String(125))
    inventory_account_code = Column(String(125))
    reorder_point = Column(DECIMAL(20, 2))
    vendor = Column(String(125))
    warehouse_name = Column(String(125))
    opening_stock = Column(DECIMAL(20, 2))
    opening_stock_value = Column(DECIMAL(20, 2))
    stock_on_hand = Column(DECIMAL(20, 2))
    item_type = Column(String(125))
    is_combo_product = Column(SmallInteger, nullable=False, default=0)
    brand = Column(String(125))
    sales_channel = Column(String(125))
    cf_asin = Column(String(125))
    cf_fsn = Column(String(125))
    cf_old_sku = Column(String(125))
    cf_old_asin = Column(String(125))
    cf_old_fsn = Column(String(125))
    cf_box_count = Column(String(125))
    cf_myntra_style_id = Column(String(125))
    cf_az_tp_excl_gst = Column(DECIMAL(20, 2))
    cf_mrp_with_tax = Column(DECIMAL(20, 2))
    cf_fk_tp_excl_gst = Column(DECIMAL(20, 2))
    cf_instamart_tp_excl_gst = Column(DECIMAL(20, 2))
    cf_ean = Column(String(125))
    cf_brands = Column(String(125))
    cf_blinkit_id = Column(String(125))
    cf_blinkit_tp = Column(DECIMAL(20, 2))
    created_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, server_default=func.now(), onupdate=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False)


#---------------------------Invoice Processing Flow for FinOps Guys----------------------------------------------------------------



class EvenflowWarehouses(Base):
    __tablename__ = 'evenflow_warehouses'

    id = Column(Integer, primary_key=True, autoincrement=True)
    client_id = Column(Integer, ForeignKey('client_master.id'), nullable=False)
    warehouse_id = Column(String(125), nullable=False)
    warehouse_name = Column(String(125), nullable=False)
    warehouse_address_line_1 = Column(String(250), nullable=False)
    warehouse_address_line_2 = Column(String(250))
    warehouse_city = Column(String(125), nullable=False)
    warehouse_state = Column(String(125), nullable=False)
    warehouse_country = Column(String(125), nullable=False)
    created_on = Column(TIMESTAMP, nullable=False, default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, default=func.now(), onupdate=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False)
    client = relationship('ClientMaster', backref='warehouses')

class EvenflowPurchaseOrder(Base):
    __tablename__ = "evenflow_purchase_orders"

    id = Column(Integer, primary_key=True, index=True)
    client_id = Column(Integer, ForeignKey('client_master.id'), nullable=False) 
    evenflow_customer_master_id = Column(Integer, ForeignKey('evenflow_customer_master.id'), nullable=False)
    sales_orders_id = Column(Integer)
    po_number = Column(String(125), index=True)
    po_status = Column(String(125))
    vendor = Column(String(125))
    ship_to_location = Column(String(125))
    ordered_on = Column(Date)
    ship_window_from = Column(Date)
    ship_window_to = Column(Date)
    freight_terms = Column(String(125))
    payment_method = Column(String(125))
    payment_terms = Column(String(125))
    purchasing_entity = Column(String(125))
    submitted_items = Column(Integer)
    submitted_qty = Column(Integer)
    submitted_total_cost = Column(Numeric(20,2))
    accepted_items = Column(Integer)
    accepted_qty = Column(Integer)
    accepted_total_cost = Column(Numeric(20,2))
    cancelled_items = Column(Integer)
    cancelled_qty = Column(Integer)
    cancelled_total_cost = Column(Numeric(20,2))
    received_items = Column(Integer)
    received_qty = Column(Integer)
    received_total_cost = Column(Numeric(20,2))
    delivery_address_to = Column(String(125))
    delivery_address = Column(String(250))
    total_qty_requested = Column(Integer, nullable=False)
    total_qty_accepted = Column(Integer)
    total_qty_fulfilled = Column(Integer)
    total_qty_outstanding = Column(Integer)
    fiscal_quarter = Column(String(125), nullable=False)
    po_month = Column(Integer, nullable=False)
    po_year = Column(Integer, nullable=False)
    po_file_path = Column(String(125))
    po_processing_status = Column(String(125), index=True)
    created_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False, default=1)

    line_items = relationship("EvenflowPurchaseOrderLineItem", back_populates="purchase_order")

class EvenflowPurchaseOrderLineItem(Base):
    __tablename__ = "evenflow_purchase_orders_line_items"

    id = Column(Integer, primary_key=True, index=True)
    evenflow_purchase_orders_id = Column(Integer, ForeignKey("evenflow_purchase_orders.id"))
    asin = Column(String(125))
    external_id = Column(String(125))
    model_number = Column(String(125))
    hsn = Column(Integer, nullable=False)
    title = Column(String(250))
    window_type = Column(String(125))
    expected_date = Column(Date, nullable=False)
    qty_requested = Column(Integer, nullable=False)
    qty_accepted = Column(Integer, nullable=False)
    qty_received = Column(Integer)
    qty_outstanding = Column(Integer)
    unit_cost = Column(Numeric(20,2))
    total_cost = Column(Numeric(20,2))
    po_line_item_processing_status = Column(String(125), index=True)
    created_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False, default=1)
    purchase_order = relationship("EvenflowPurchaseOrder", back_populates="line_items")

class EvenflowInvoiceInputs(Base):
    __tablename__ = "evenflow_invoice_inputs"

    id = Column(Integer, primary_key=True, index=True)
    client_id = Column(Integer, ForeignKey('client_master.id'), nullable=False) 
    evenflow_customer_master_id = Column(Integer, ForeignKey('evenflow_customer_master.id'), nullable=False)
    evenflow_product_master_id = Column(Integer, ForeignKey('evenflow_product_master.id'), nullable=False)
    invoice_number = Column(String(125))
    estimate_number = Column(String(125))
    invoice_date = Column(String(125))
    invoice_status = Column(String(125), nullable=False)
    customer_name = Column(String(125), nullable=False)
    gst_treatment = Column(String(125))
    tcs_tax_name = Column(String(125))
    tcs_percentage = Column(Numeric(20,2))
    tcs_amount = Column(Numeric(20,2))
    nature_of_collection = Column(String(125))
    tcs_payable_account = Column(String(125))
    tcs_receivable_account = Column(String(125))
    gstin = Column(String(125), nullable=False)
    tds_name = Column(String(125))
    tds_percentage = Column(Numeric(20,2))
    tds_section_code = Column(String(125))
    tds_amount = Column(Numeric(20,2))
    place_of_supply = Column(String(125))
    other_warehouse_name = Column(String(125))
    other_warehouse_address_line_1 = Column(String(250))
    other_warehouse_address_line_2 = Column(String(250))
    other_warehouse_city = Column(String(125))
    other_warehouse_state = Column(String(125))
    other_warehouse_country = Column(String(125))
    other_warehouse_postal_code = Column(String(125))
    purchase_order_number = Column(String(125))
    evenflow_purchase_orders_id = Column(Integer, ForeignKey("evenflow_purchase_orders.id"), nullable=False)
    evenflow_purchase_orders_line_items_id = Column(Integer, ForeignKey("evenflow_purchase_orders_line_items.id"), nullable=False)
    expense_reference_id = Column(String(125))
    payment_terms = Column(String(125))
    payment_terms_label = Column(String(125))
    expected_date = Column(Date, nullable=False)
    expected_payment_date = Column(Date)
    sales_person = Column(String(125))
    shipping_charge_tax_name = Column(String(125))
    shipping_charge_tax_type = Column(String(125))
    shipping_charge_tax_percentage = Column(Numeric(20,2))
    shipping_charge = Column(Numeric(20,2))
    shipping_charge_tax_exemption_code = Column(String(125))
    shipping_charge_sac_code = Column(String(125))
    currency_code = Column(String(125))
    exchange_rate = Column(Numeric(20,2))
    account = Column(String(125))
    item_name = Column(String(255), nullable=False)
    sku = Column(String(125), nullable=False)
    item_desc = Column(String(125))
    item_type = Column(String(125))
    hsn_sac = Column(Integer, nullable=False)
    quantity = Column(Numeric(20,2), nullable=False)
    usage_unit = Column(String(125), nullable=False)
    item_price = Column(Numeric(20,2), nullable=False)
    item_tax_exemption_reason = Column(String(250))
    is_inclusive_tax = Column(SmallInteger, nullable=False)
    item_tax = Column(String(125))
    item_tax_type = Column(String(125))
    item_tax_percentage = Column(Numeric(20,2))
    reverse_charge_tax_name = Column(String(125))
    reverse_charge_tax_rate = Column(Numeric(20,2))
    reverse_charge_tax_type = Column(String(125))
    project_name = Column(String(125))
    supply_type = Column(String(125))
    discount_type = Column(String(125))
    is_discount_before_tax = Column(SmallInteger)
    entity_discount_percent = Column(Numeric(20,2))
    entity_discount_amount = Column(Numeric(20,2))
    discount = Column(Numeric(20,2))
    discount_amount = Column(Numeric(20,2))
    adjustment = Column(Numeric(20,2))
    adjustment_description = Column(String(250))
    ecommerce_operator_name = Column(String(125))
    ecommerce_operator_gstin = Column(String(125))
    paypal = Column(SmallInteger)
    razorpay = Column(SmallInteger)
    partial_payments = Column(SmallInteger)
    template_name = Column(String(125))
    notes = Column(String(250))
    terms_conditions = Column(String(250))
    branch_name = Column(String(125))
    warehouse_name = Column(String(125))
    fiscal_quarter = Column(String(125), nullable=False)
    po_month = Column(Integer, nullable=False)
    po_year = Column(Integer, nullable=False)
    payment_received = Column(SmallInteger)
    appointment_id = Column(String(125))
    appointment_date = Column(Date)
    accepted_qty = Column(Integer)
    evenflow_warehouses_id = Column(Integer, ForeignKey("evenflow_warehouses.id"))
    invoice_generated_acc_tool = Column(SmallInteger, nullable=False, default=0)
    po_file_path = Column(String(125))
    invoice_inputs_file_path = Column(String(125))
    box_number = Column(String(125))
    total_box_count = Column(Integer)
    po_line_item_processing_status = Column(String(125))
    created_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, server_default=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False)
    billing_attention = Column(String(125))
    billing_address_line_1 = Column(String(250))
    billing_address_line_2 = Column(String(250))
    billing_city = Column(String(125))
    billing_state = Column(String(125))
    billing_country = Column(String(125))
    billing_code = Column(String(125))
    billing_phone = Column(String(125))
    billing_fax = Column(String(125))
    shipping_attention = Column(String(125))
    shipping_address_line_1 = Column(String(250))
    shipping_address_line_2 = Column(String(250))
    shipping_city = Column(String(125))
    shipping_state = Column(String(125))
    shipping_country = Column(String(125))
    shipping_code = Column(String(125))
    shipping_phone= Column(String(125))
    shipping_fax= Column(String(125))
    brand_bank_name = Column(String(125))
    brand_bank_account_number = Column(SmallInteger)
    brand_ifsc= Column(String(20))
    brand_bank_account_type = Column(String(50))
    brand_name = Column(String(125))
    brand_pan = Column(String(125))
    brand_gstin = Column(String(125))
    brand_reg_address_line_1 = Column(String(250))
    brand_reg_address_line_2 = Column(String(250))
    brand_reg_city = Column(String(125))
    brand_reg_state = Column(String(125))
    brand_reg_country = Column(String(125))
    cgst_percentage  = Column(Numeric(20,2))
    cgst_amount  = Column(Numeric(20,2))
    sgst_percentage  = Column(Numeric(20,2))
    sgst_amount   = Column(Numeric(20,2))
    igst_percentage  = Column(Numeric(20,2))
    igst_amount   = Column(Numeric(20,2))
    amount  = Column(Numeric(20,2))

    def to_dict(self):
        return {column.name: getattr(self, column.name) for column in self.__table__.columns}

class EvenflowInvoices(Base):
    __tablename__ = 'evenflow_invoices'

    id = Column(Integer, primary_key=True, autoincrement=True)
    client_id = Column(Integer, ForeignKey('client_master.id'), nullable=False)
    evenflow_customer_master_id = Column(Integer, ForeignKey('evenflow_customer_master.id'), nullable=False)
    evenflow_product_master_id = Column(Integer, ForeignKey('evenflow_product_master.id'), nullable=False)
    invoice_number = Column(String(125), unique=True)
    estimate_number = Column(String(125))
    invoice_date = Column(Date, nullable=False)
    invoice_amount = Column(Numeric(20,2), nullable=False, default=0)
    invoice_status = Column(String(125), nullable=False)
    customer_name = Column(String(125), nullable=False)
    gst_treatment = Column(String(125))
    tcs_tax_name = Column(String(125))
    tcs_percentage = Column(Numeric(20,2))
    tcs_amount = Column(Numeric(20,2))
    nature_of_collection = Column(String(125))
    tcs_payable_account = Column(String(125))
    tcs_receivable_account = Column(String(125))
    gstin = Column(String(125), nullable=False)
    tds_name = Column(String(125))
    tds_percentage = Column(Numeric(20,2))
    tds_section_code = Column(String(125))
    tds_amount = Column(Numeric(20,2))
    place_of_supply = Column(String(125))
    purchase_order_number = Column(String(125), nullable=False)
    evenflow_purchase_orders_id = Column(Integer, ForeignKey('evenflow_purchase_orders.id'), nullable=False)
    other_warehouse_name = Column(String(125))
    other_warehouse_address_line_1 = Column(String(125))
    other_warehouse_address_line_2 = Column(String(125))
    other_warehouse_city = Column(String(125))
    other_warehouse_state = Column(String(125))
    other_warehouse_country = Column(String(125))
    other_warehouse_postal_code = Column(String(125))
    expense_reference_id = Column(String(125))
    payment_terms = Column(String(125))
    payment_terms_label = Column(String(125))
    expected_date = Column(Date)
    expected_payment_date = Column(Date)
    sales_person = Column(String(125))
    shipping_charge_tax_name = Column(String(125))
    shipping_charge_tax_type = Column(String(125))
    shipping_charge_tax_percentage = Column(Numeric(20,2))
    shipping_charge = Column(Numeric(20,2))
    shipping_charge_tax_exemption_code = Column(String(125))
    shipping_charge_sac_code = Column(String(125))
    currency_code = Column(String(125))
    exchange_rate = Column(Numeric(20,2))
    adjustment = Column(Numeric(20,2))
    adjustment_description = Column(String(250))
    paypal = Column(SmallInteger, nullable=False, default=0)
    razorpay = Column(SmallInteger, nullable=False, default=0)
    partial_payments = Column(SmallInteger, nullable=False, default=0)
    template_name = Column(String(125))
    notes = Column(String(250))
    branch_name = Column(String(125))
    warehouse_name = Column(String(125))
    fiscal_quarter = Column(String(125), nullable=False)
    po_month = Column(Integer, nullable=False)
    po_year = Column(Integer, nullable=False)
    payment_received = Column(SmallInteger)
    ageing_days = Column(Integer)
    evenflow_warehouses_id = Column(Integer, ForeignKey('evenflow_warehouses.id'))
    invoice_generated_acc_tool = Column(SmallInteger, nullable=False, default=0)
    po_file_path = Column(String(255))
    invoice_inputs_file_path = Column(String(255))
    invoice_file_path = Column(String(255))
    total_box_count = Column(Integer)
    created_on = Column(TIMESTAMP, nullable=False, default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, default=func.now(), onupdate=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False)
    client = relationship('ClientMaster', backref='invoices')
    customer = relationship('EvenflowCustomerMaster', backref='invoices')
    product = relationship('EvenflowProductMaster', backref='invoices')
    purchase_order = relationship('EvenflowPurchaseOrder', backref='invoices')
    warehouse = relationship('EvenflowWarehouses', backref='invoices')
    


class EvenflowInvoicesLineItems(Base):
    __tablename__ = 'evenflow_invoices_line_items'

    id = Column(Integer, primary_key=True, autoincrement=True)
    evenflow_invoices_id = Column(Integer, ForeignKey('evenflow_invoices.id'), nullable=False)
    evenflow_invoice_inputs_id = Column(Integer, ForeignKey('evenflow_invoice_inputs.id'), nullable=False)
    place_of_supply = Column(String(125))
    other_warehouse_name = Column(String(125))
    other_warehouse_address_line_1 = Column(String(250))
    other_warehouse_address_line_2 = Column(String(250))
    other_warehouse_city = Column(String(125))
    other_warehouse_state = Column(String(125))
    other_warehouse_country = Column(String(125))
    other_warehouse_postal_code = Column(String(125))
    warehouse_name = Column(String(125))
    evenflow_warehouses_id = Column(Integer, ForeignKey('evenflow_warehouses.id'))
    account = Column(String(125))
    item_name = Column(String(255), nullable=False)
    sku = Column(String(125), nullable=False)
    evenflow_product_master_id = Column(Integer, ForeignKey('evenflow_product_master.id'), nullable=False)
    item_desc = Column(String(125))
    item_type = Column(String(125))
    hsn_sac = Column(Integer, nullable=False)
    quantity = Column(Numeric(20,2), nullable=False)
    usage_unit = Column(String(125), nullable=False)
    item_price = Column(Numeric(20,2), nullable=False)
    item_tax_exemption_reason = Column(String(250))
    is_inclusive_tax = Column(SmallInteger, nullable=False)
    item_tax = Column(String(125))
    item_tax_type = Column(String(125))
    item_tax_percentage = Column(Numeric(20,2))
    reverse_charge_tax_name = Column(String(125))
    reverse_charge_tax_rate = Column(Numeric(20,2))
    reverse_charge_tax_type = Column(String(125))
    project_name = Column(String(125))
    supply_type = Column(String(125))
    discount_type = Column(String(125))
    is_discount_before_tax = Column(SmallInteger)
    entity_discount_percent = Column(Numeric(20,2))
    entity_discount_amount = Column(Numeric(20,2))
    discount = Column(Numeric(20,2))
    discount_amount = Column(Numeric(20,2))
    adjustment = Column(Numeric(20,2))
    adjustment_description = Column(String(250))
    box_number = Column(String(125))
    created_on = Column(TIMESTAMP, nullable=False, default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, default=func.now(), onupdate=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False)

    # Relationships
    invoice = relationship('EvenflowInvoices', backref='line_items')
    invoice_input = relationship('EvenflowInvoiceInputs', backref='line_items')
    product = relationship('EvenflowProductMaster', backref='line_items')
    warehouse = relationship('EvenflowWarehouses', backref='line_items')

Base = declarative_base()

class user_nameAndOTP(Base):
    __tablename__ = "otp"

    user_name = Column(String, primary_key=True, index=True)  # The user_name is unique here
    otp = Column(Integer, nullable=False)
    generated_at = Column(TIMESTAMP(timezone=False), default=datetime.now)  # timestamp without time zone
    valid_until = Column(TIMESTAMP(timezone=False), nullable=False)  # timestamp without time zone

class EvenflowInvoicesEwayBills(Base):
    __tablename__ = "evenflow_invoices_eway_bills"

    id = Column(Integer, primary_key=True, autoincrement=True)
    evenflow_invoices_id = Column(Integer, ForeignKey("evenflow_invoices.id"), nullable=False)
    eway_bill_number = Column(String(125))
    purchase_order_number = Column(String(125), nullable=False)
    invoice_number = Column(String(125), nullable=False)
    transport_provider_company_name = Column(String(125))
    transport_provider_contact_name = Column(String(125))
    transport_provider_contact_number = Column(String(125))
    transport_provider_vehicle_number = Column(String(125))
    notes = Column(String(250))
    created_on = Column(TIMESTAMP, nullable=False, default=func.now())
    created_by = Column(String(125))
    modified_on = Column(TIMESTAMP, nullable=False, default=func.now(), onupdate=func.now())
    modified_by = Column(String(125))
    active_flag = Column(SmallInteger, nullable=False)






class EvenflowInvoicePayments(Base):
    __tablename__ = 'evenflow_invoice_payments'

    id = Column(Integer, primary_key=True, autoincrement=True)
    client_id = Column(Integer)
    evenflow_customer_master_id = Column(Integer, nullable=False)
    evenflow_invoice_id = Column(Integer)
    invoice_number = Column(String(125), nullable=False)
    payment_number = Column(String(125), nullable=False)
    invoice_date = Column(Date, nullable=False)
    transaction_type = Column(String(125), nullable=False)
    transaction_description = Column(String(250), nullable=True)
    reference_details = Column(String(125), nullable=False)
    original_invoice_number = Column(String(125), nullable=True)
    invoice_amount = Column(Numeric(20, 2), nullable=False)
    invoice_currency = Column(String(125), nullable=False)
    withholding_amount = Column(Numeric(20, 2), nullable=False, default=0)
    terms_discount_taken = Column(Numeric(20, 2), nullable=False, default=0)
    amount_paid = Column(Numeric(20, 2), nullable=False, default=0)
    remaining_amount = Column(Numeric(20, 2), nullable=False, default=0)
    created_on = Column(DateTime, nullable=False, server_default=func.current_timestamp())
    created_by = Column(String(125), nullable=True)
    modified_on = Column(DateTime, nullable=False, server_default=func.current_timestamp(), onupdate=func.current_timestamp())
    modified_by = Column(String(125), nullable=True)
    active_flag = Column(SmallInteger, nullable=False)